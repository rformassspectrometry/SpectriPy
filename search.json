[{"path":"https://rformassspectrometry.github.io/SpectriPy/articles/SpectriPy.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Integrating Spectra with Python's matchms package","text":"SpectriPy package allows integration Python MS packages Spectra-based MS analysis R. Python functionality wrapped R functions allowing seamless integration functionality Python’s matchms package R. addition, functions convert R’s Spectra objects Python’s matchms spectrum objects available advanced user developer enabling create custom functions workflows Spectra objects Python executing R using reticulate R package.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/articles/SpectriPy.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Integrating Spectra with Python's matchms package","text":"BiocManager package already available, please install install.packages(\"BiocManager\") install development version SpectriPy GitHub, please install remotes package `install.packages(“remotes”). package requires python environment available can installed BiocManager R package using command BiocManager::install(\"RforMassSpectrometry/SpectriPy\"). install latest version package GitHub. required python libraries installed automatically demand. Note first installation first invocation specific functions might take long installation process.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/articles/SpectriPy.html","id":"spectra-similarity-calculations-using-matchms","dir":"Articles","previous_headings":"","what":"Spectra similarity calculations using matchms","title":"Integrating Spectra with Python's matchms package","text":"SpectriPy package provides compareSpectriPy() function allows perform spectra similarity calculations using scoring functions matchms Python package. currently supported scoring functions listed along parameter class allows selecting configuring algorithm compareSpectriPy() function. Additional functions added future. CosineGreedy: CosineGreedyParam. CosineHungarian: CosineHungarianParam. ModifiedCosineParam: ModifiedCosineParam. next create simple example spectra subsequently use compareSpectriPy() function calculate pairwise similarities . first calculate pairwise similarities spectra defined caffeine using Spectra’s built-compareSpectra() function. Thus, compareSpectra() returned pairwise similarity scores (default calculated using normalized dot-product function) spectra (rows) spectra caf (columns). compareSpectriPy() works similar, difference need specify configure similarity function (matchms) using dedicated parameter object. calculate similarity using CosineGreedy function changing tolerance value 0.05 (instead default 0.1). Executing following step automatically download install conda mini forge manage Python package dependencies. result compareSpectriPy() returns also numeric matrix similarities. Note also first compareSpectriPy() call takes usually little longer Python setup initialized. Next use ModifiedCosine algorithm considers also differences spectra’s precursor m/z calculation. third example CosineHungarian algorithm, also similarity function matchms. algorithm calculates cosine similarity score CosineGreedyParam, using Hungarian algorithm find best matching peaks compared spectra. algorithm can configured parameters tolerance, mzPower intensityPower (see parameter description details). fourth example NeutralLossesCosine algorithm, also similarity function matchms. neutral losses cosine score aims quantifying similarity two mass spectra. score calculated finding best possible matches peaks two spectra. Two peaks considered potential match m/z ratios lie within given tolerance mass-shift applied. mass shift difference precursor-m/z two spectra. Note abovementioned similarity calculations spectra precursor m/z values need available, otherwise error thrown. Thus, always ensure remove spectra without precursor m/z values prior similarity scoring similarity method. remove precursor m/z one input spectra show Spectra object subsetted valid spectra method.","code":"library(Spectra) library(SpectriPy)  ## Create a Spectra object with two MS2 spectra for Caffeine. caf <- DataFrame(     msLevel = c(2L, 2L),     name = \"Caffeine\",     precursorMz = c(195.0877, 195.0877) ) caf$intensity <- list(     c(340.0, 416, 2580, 412),     c(388.0, 3270, 85, 54, 10111)) caf$mz <- list(     c(135.0432, 138.0632, 163.0375, 195.0880),     c(110.0710, 138.0655, 138.1057, 138.1742, 195.0864)) caf <- Spectra(caf)  ## Create a Spectra object with two MS2 spectra for 1-Methylhistidine mhd <- DataFrame(     msLevel = c(2L, 2L),     precursorMz = c(170.0924, 170.0924),     id = c(\"HMDB0000001\", \"HMDB0000001\"),     name = c(\"1-Methylhistidine\", \"1-Methylhistidine\")) mhd$mz <- list(     c(109.2, 124.2, 124.5, 170.16, 170.52),     c(83.1, 96.12, 97.14, 109.14, 124.08, 125.1, 170.16)) mhd$intensity <- list(     c(3.407, 47.494, 3.094, 100.0, 13.240),     c(6.685, 4.381, 3.022, 16.708, 100.0, 4.565, 40.643)) mhd <- Spectra(mhd) all <- c(caf, mhd) res_r <- compareSpectra(all, caf) res_r ##           1         2 ## 1 1.0000000 0.1973448 ## 2 0.1973448 1.0000000 ## 3 0.0000000 0.0000000 ## 4 0.0000000 0.0000000 res <- compareSpectriPy(all, caf, param = CosineGreedyParam(tolerance = 0.05)) res ##           [,1]      [,2] ## [1,] 1.0000000 0.1948181 ## [2,] 0.1948181 1.0000000 ## [3,] 0.0000000 0.0000000 ## [4,] 0.0000000 0.0000000 res <- compareSpectriPy(all, caf, param = ModifiedCosineParam()) res ##            [,1]      [,2] ## [1,] 1.00000000 0.1948181 ## [2,] 0.19481813 1.0000000 ## [3,] 0.13841831 0.8520549 ## [4,] 0.05724816 0.3523997 res <- compareSpectriPy(all, caf, param = CosineHungarianParam()) res ##           [,1]      [,2] ## [1,] 1.0000000 0.1948181 ## [2,] 0.1948181 1.0000000 ## [3,] 0.0000000 0.0000000 ## [4,] 0.0000000 0.0000000 res <- compareSpectriPy(all, caf, param = NeutralLossesCosineParam()) res ##            [,1]       [,2] ## [1,] 1.00000000 0.04853991 ## [2,] 0.04853991 1.00000000 ## [3,] 0.00000000 0.00000000 ## [4,] 0.00000000 0.00000000 ## Remove precursor m/z from the 3rd spectrum all$precursorMz[3] <- NA  ## Filter the input spectra removing those with missing precursor. all <- all[!is.na(precursorMz(all))]  compareSpectriPy(all, caf, param = ModifiedCosineParam()) ##            [,1]      [,2] ## [1,] 1.00000000 0.1948181 ## [2,] 0.19481813 1.0000000 ## [3,] 0.05724816 0.3523997"},{"path":"https://rformassspectrometry.github.io/SpectriPy/articles/SpectriPy.html","id":"advanced-use-and-internals","dir":"Articles","previous_headings":"","what":"Advanced use and internals","title":"Integrating Spectra with Python's matchms package","text":"advanced users developers, rspec_to_pyspec() pyspec_to_rspec() functions available enable conversion MS data representations R Python (.e. Spectra::Spectra object Python matchms.Spectrum object). use functions reticulate R package needs installed along Python environment matchms Python package. illustrate use initialize Python environment bundled using basilisk package within SpectriPy. next create simple Spectra object representing fragment spectra small compounds. next convert Spectra matchms.Spectrum object. result got now Python list 3 Spectrum objects containing peak data sps well reduced set available spectra variables sps. spectra variables get copied Python can defined mapping parameter rspec_to_pyspec. default convert variables defined spectraVariableMapping(), additional variables along respective names Python Spectrum object can defined . list pre-selected spectra variables converted default. Spectra data converted Python, directly call routines matchms package using reticulate R package. normalize intensities 3 spectra using normalize_intensities() function matchms.filtering library. thus need first import functionality package can call function directly (Python) objects. can now convert list Python matchms.Spectrum objects back R pyspec_to_rspec(): Intensity values now normalized values 0 1. Note however , much better (likely efficient) directly use Python function list Spectrum objects instead mixed R Python code used example . define simple python script iterates spectra python performs normalization. last need also stop Python environment enabled basilisk.","code":"library(SpectriPy) library(basilisk) ## Loading required package: reticulate cl <- basiliskStart(SpectriPy:::matchms_env) library(Spectra)  # create example spectra spd <- DataFrame(   msLevel = c(2L, 2L, 2L),   id = c(\"HMDB0000001\", \"HMDB0000001\", \"HMDB0001847\"),   name = c(\"1-Methylhistidine\", \"1-Methylhistidine\", \"Caffeine\"))  ## Assign m/z and intensity values. spd$mz <- list(   c(109.2, 124.2, 124.5, 170.16, 170.52),   c(83.1, 96.12, 97.14, 109.14, 124.08, 125.1, 170.16),   c(56.0494, 69.0447, 83.0603, 109.0395, 110.0712,     111.0551, 123.0429, 138.0662, 195.0876)) spd$intensity <- list(   c(3.407, 47.494, 3.094, 100.0, 13.240),   c(6.685, 4.381, 3.022, 16.708, 100.0, 4.565, 40.643),   c(0.459, 2.585, 2.446, 0.508, 8.968, 0.524, 0.974, 100.0, 40.994))  sps <- Spectra(spd) pysps <- rspec_to_pyspec(sps) pysps ## [Spectrum(precursor m/z=nan, 5 fragments between 109.2 and 170.5), Spectrum(precursor m/z=nan, 7 fragments between 83.1 and 170.2), Spectrum(precursor m/z=nan, 9 fragments between 56.0 and 195.1)] spectraVariableMapping() ##                  precursorMz           precursorIntensity  ##               \"precursor_mz\"        \"precursor_intensity\"  ##              precursorCharge                        rtime  ##                     \"charge\"             \"retention_time\"  ##              collisionEnergy      isolationWindowTargetMz  ##           \"collision_energy\" \"isolation_window_target_mz\"  ##                      msLevel  ##                   \"ms_level\" library(reticulate) filters <- import(\"matchms.filtering\")  res <- vector(\"list\", length(pysps)) for (i in (seq_along(pysps) - 1))     res[[i + 1]] <- filters$normalize_intensities(pysps[i]) res <- r_to_py(res) res ## [Spectrum(precursor m/z=nan, 5 fragments between 109.2 and 170.5), Spectrum(precursor m/z=nan, 7 fragments between 83.1 and 170.2), Spectrum(precursor m/z=nan, 9 fragments between 56.0 and 195.1)] sps_r <- pyspec_to_rspec(res) #' The normalized intensities intensity(sps_r) ## NumericList of length 3 ## [[1]] 0.03407 0.47494 0.03094 1 0.1324 ## [[2]] 0.06685 0.04381 0.03022 0.16708 1 0.04565 0.40643 ## [[3]] 0.00459 0.02585 0.02446 0.00508 0.08968 0.00524 0.00974 1 0.40994 #' The original intensities intensity(sps) ## NumericList of length 3 ## [[1]] 3.407 47.494 3.094 100 13.24 ## [[2]] 6.685 4.381 3.022 16.708 100 4.565 40.643 ## [[3]] 0.459 2.585 2.446 0.508 8.968 0.524 0.974 100 40.994 py_script <- paste0(\"from matchms.filtering import normalize_intensities\\n\",                     \"for i in range(len(pysps)):\\n\",                     \"    pysps[i] = normalize_intensities(pysps[i])\\n\") py$pysps <- pysps py_run_string(py_script)  tmp <- pyspec_to_rspec(pysps) intensity(tmp) ## NumericList of length 3 ## [[1]] 0.03407 0.47494 0.03094 1 0.1324 ## [[2]] 0.06685 0.04381 0.03022 0.16708 1 0.04565 0.40643 ## [[3]] 0.00459 0.02585 0.02446 0.00508 0.08968 0.00524 0.00974 1 0.40994 basiliskStop(cl)"},{"path":"https://rformassspectrometry.github.io/SpectriPy/articles/SpectriPy.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Integrating Spectra with Python's matchms package","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ## [1] basilisk_1.18.0     reticulate_1.40.0   SpectriPy_0.2.1     ## [4] Spectra_1.16.0      BiocParallel_1.40.0 S4Vectors_0.44.0    ## [7] BiocGenerics_0.52.0 BiocStyle_2.34.0    ##  ## loaded via a namespace (and not attached): ##  [1] Matrix_1.7-2           jsonlite_1.8.9         compiler_4.4.2         ##  [4] BiocManager_1.30.25    filelock_1.0.3         Rcpp_1.0.14            ##  [7] parallel_4.4.2         cluster_2.1.8          jquerylib_0.1.4        ## [10] png_0.1-8              systemfonts_1.2.1      IRanges_2.40.1         ## [13] textshaping_1.0.0      yaml_2.3.10            fastmap_1.2.0          ## [16] lattice_0.22-6         R6_2.5.1               ProtGenerics_1.38.0    ## [19] knitr_1.49             htmlwidgets_1.6.4      MASS_7.3-64            ## [22] bookdown_0.42          desc_1.4.3             bslib_0.9.0            ## [25] rlang_1.1.5            dir.expiry_1.14.0      cachem_1.1.0           ## [28] xfun_0.50              fs_1.6.5               MsCoreUtils_1.18.0     ## [31] sass_0.4.9             cli_3.6.3              withr_3.0.2            ## [34] pkgdown_2.1.1.9000     grid_4.4.2             digest_0.6.37          ## [37] MetaboCoreUtils_1.14.0 lifecycle_1.0.4        clue_0.3-66            ## [40] evaluate_1.0.3         codetools_0.2-20       ragg_1.3.3             ## [43] rmarkdown_2.29         basilisk.utils_1.18.0  tools_4.4.2            ## [46] htmltools_0.5.8.1"},{"path":"https://rformassspectrometry.github.io/SpectriPy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Witting. Author. Johannes Rainer. Author, maintainer. Carolin Huber. Author. Helge Hecht. Author. Marilyn De Graeve. Contributor. Thomas Naake. Contributor.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Witting M, Rainer J, Huber C, Hecht H (2025). SpectriPy: Integrating Spectra Python's matchms. R package version 0.2.1, https://github.com/RforMassSpectrometry/SpectriPy.","code":"@Manual{,   title = {SpectriPy: Integrating Spectra with Python's matchms},   author = {Michael Witting and Johannes Rainer and Carolin Huber and Helge Hecht},   year = {2025},   note = {R package version 0.2.1},   url = {https://github.com/RforMassSpectrometry/SpectriPy}, }"},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":null,"dir":"","previous_headings":"","what":"Developer notes","title":"Developer notes","text":"documents describes general structure package provides helpful references code files contributors. Preferably read full document.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":"general-info","dir":"","previous_headings":"","what":"General info","title":"Developer notes","text":"package good ? Spectra package (Spectra class) provides powerful infrastructure mass spectrometry (MS) data R (possibly see SpectraTutorials information, particular Spectra-backends vignette description data structure). Powerful MS data algorithms algorithms also available Python, e.g. provided matchms library. re-implement ’s already available? package translates R Spectra object matchms Python Spectrum data structure allows call functions matchms package translate results back R data objects.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":"general-package-structure","dir":"","previous_headings":"","what":"General package structure","title":"Developer notes","text":"find ? R folder contains R source files. R/conversion.R contains functions convert R Python data structures (e.g. Spectra::Spectra matchms.Spectrum). conversion Python result R data type handled R’s reticulate package, can convert basic data types R Python. R/compareSpectriPy.R contains mass spectral similarity calculation functions. core function internal .compare_spectra_python() function manages Anaconda environment, translates data Python data structures calls Python command using py_run_string(). Python command generated python_command() (e.g. ) command called parameter object CosineGreedyParam. use new similarity calculation function new Python functionality/algorithm, ideally new param object implemented python_command() method, returns python command specific new algorithm/Python functionality run Python. R/basilisk.R cointains Python environment definition required/used Python libraries (see information). tests folder contains unit tests. general testthat.R file configures sets tests unit test file R source file (named test_.R) within testthat folder. vignettes folder contains R markdown document explains use SpectriPy package using examples. good starting point explore package functionality.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":"python-setup-and-configuration","dir":"","previous_headings":"","what":"Python setup and configuration","title":"Developer notes","text":"python libraries defined? SpectriPy uses R reticulate package conversion (basic) R Python data types.relies Bioconductor’s basilisk package setup manage Python envrionment. Python environment required libraries defined R/basilisk.R file. Different environments can defined file required libraries (including versions). execute Python code certain library, basiliscRun() function used, respective environment providing library enabled disabled basiliskStart() basiliskStop() functions. reticulate r_to_py() py_to_r() functions used conversion basic data types R Python vice versa. use functions, Python environment matchms library must used (one defined SpectriPy managed basilisk needs activated first using cl <- basiliskStart(SpectriPy:::matchms_env) (see package vignette example).","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":"test-data","dir":"","previous_headings":"","what":"Test data","title":"Developer notes","text":"data used tests? package contain test data files. Test example data created manually defining m/z intensity values MS peaks. Data files added (e.g. MGF format) needed put inst/extdata folder. Alternatively, example files mzML format available Bioconductor’s msdata package. test package newly created functionality: add respective unit tests tests/testthat folder evaluate e.g. running rcmdcheck::rcmdcheck(args = \"---manual\") R session started within package folder.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":"potential-contributions-and-extensions","dir":"","previous_headings":"","what":"Potential contributions and extensions","title":"Developer notes","text":"implemented? Add new similarity calculation functionality SpectriPy. See also issue #19. Integrate Python libraries? discussion - see issue #24. Integrate functionality spectra processing, downstream analysis (e.g. cleaning), … See also issue #20. Ability translate additional data structures. See also issue #18. efficient translation data structures. Better handling metadata. See also issue #17. Improve documentation. See also issue #25. Define use case analysis (ideally several): show data can analyzed SpectriPy package contrast “quarto” “Jupyter Notebook” document directly combining R Python code: really need additional convenience functionality within R package, can , , achieved e.g. “quarto”? benefits bundling/wrapping Python functionality R functions? See also issue #21. Add use cases examples package vignette (vignettes/SpectriPy.Rmd) file. See also issue #26.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/devnotes.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Developer notes","text":"contribute? Ideally fork github repository, implement extensions make pull request main branch. Follow coding style guidelines adhere code conduct.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"integrating-spectra-with-pythons-matchms-library","dir":"","previous_headings":"","what":"Integrating Spectra with Python's matchms","title":"Integrating Spectra with Python's matchms","text":"SpectriPy package allows integration Python MS packages Spectra-based MS analysis R. Python functionality wrapped R functions allowing seamless integration functionality Python’s matchms library R. addition, functions convert R’s Spectra::Spectra objects Python’s matchms.Spectrum objects available advanced user developer enabling create custom functions workflows Spectra objects Python executing R using reticulate R package.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"setup-spectripy-for-first-time-users","dir":"","previous_headings":"","what":"Setup SpectriPy for first time users","title":"Integrating Spectra with Python's matchms","text":"Instructions install R RStudio first time described , source https://rstudio-education.github.io/hopr/packages2.html.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"installing-r-and-rstudio","dir":"","previous_headings":"","what":"Installing R and RStudio","title":"Integrating Spectra with Python's matchms","text":"get started R, need acquire copy. appendix show download R well RStudio, software application makes R easier use. ’ll go downloading R opening first R session. R RStudio free easy download.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"how-to-download-and-install-r","dir":"","previous_headings":"Installing R and RStudio","what":"How to Download and Install R","title":"Integrating Spectra with Python's matchms","text":"R maintained international team developers make language available web page Comprehensive R Archive Network. top web page provides three links downloading R. Follow link describes operating system: Windows, Mac, Linux.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"windows","dir":"","previous_headings":"Installing R and RStudio > How to Download and Install R","what":"Windows","title":"Integrating Spectra with Python's matchms","text":"install R Windows, click “Download R Windows” link. click “base” link. Next, click first link top new page. link say something like “Download R 3.0.3 Windows,” except 3.0.3 replaced current version R. link downloads installer program, installs --date version R Windows. Run program step installation wizard appears. wizard install R program files folders place shortcut Start menu. Note ’ll need appropriate administration privileges install new software machine.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"mac","dir":"","previous_headings":"Installing R and RStudio > How to Download and Install R","what":"Mac","title":"Integrating Spectra with Python's matchms","text":"install R Mac, click “Download R Mac” link. Next, click R-3.0.3 package link (package link current release R). installer download guide installation process, easy. installer lets customize installation, defaults suitable users. ’ve never found reason change . computer requires password installing new progams, ’ll need . Binaries Versus Source R can installed precompiled binaries built source operating system. Windows Mac machines, installing R binaries extremely easy. binary comes preloaded installer. Although can build R source platforms, process much complicated won’t provide much benefit users. Linux systems, opposite true. Precompiled binaries can found systems, much common build R source files installing Linux. download pages CRAN’s website provide information building R source Windows, Mac, Linux platforms.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"linux","dir":"","previous_headings":"Installing R and RStudio > How to Download and Install R","what":"Linux","title":"Integrating Spectra with Python's matchms","text":"R comes preinstalled many Linux systems, ’ll want newest version R date. CRAN website provides files build R source Debian, Redhat, SUSE, Ubuntu systems link “Download R Linux.” Click link follow directory trail version Linux wish install . exact installation procedure vary depending Linux system use. CRAN guides process grouping set source files documentation README files explain install system. 32-bit Versus 64-bit R comes 32-bit 64-bit versions. use? cases, won’t matter. versions use 32-bit integers, means compute numbers numerical precision. difference occurs way version manages memory. 64-bit R uses 64-bit memory pointers, 32-bit R uses 32-bit memory pointers. means 64-bit R larger memory space use (search ). rule thumb, 32-bit builds R faster 64-bit builds, though always. hand, 64-bit builds can handle larger files data sets fewer memory management problems. either version, maximum allowable vector size tops around 2 billion elements. operating system doesn’t support 64-bit programs, RAM less 4 GB, 32-bit R . Windows Mac installers automatically install versions system supports 64-bit R.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"using-r","dir":"","previous_headings":"Installing R and RStudio","what":"Using R","title":"Integrating Spectra with Python's matchms","text":"R isn’t program can open start using, like Microsoft Word Internet Explorer. Instead, R computer language, like C, C++, UNIX. use R writing commands R language asking computer interpret . old days, people ran R code UNIX terminal window—hackers movie 1980s. Now almost everyone uses R application called RStudio, recommend , . R UNIX can still run R UNIX BASH window typing command: R opens R interpreter. can work close interpreter running q() finished.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"rstudio","dir":"","previous_headings":"Installing R and RStudio","what":"RStudio","title":"Integrating Spectra with Python's matchms","text":"RStudio application like Microsoft Word—except instead helping write English, RStudio helps write R. use RStudio throughout book makes using R much easier. Also, RStudio interface looks Windows, Mac OS, Linux. help match book personal experience. can download RStudio free. Just click “Download RStudio” button follow simple instructions follow. ’ve installed RStudio, can open like program computer—usually clicking icon desktop. R GUIs Windows Mac users usually program terminal window, Windows Mac downloads R come simple program opens terminal-like window run R code . opens click R icon Windows Mac computer. programs little basic terminal window, much. may hear people refer Windows Mac R GUIs. open RStudio, window appears three panes , Figure 1. largest pane console window. ’ll run R code see results. console window exactly ’d see ran R UNIX console Windows Mac GUIs. Everything else see unique RStudio. Hidden panes text editor, graphics window, debugger, file manager, much . ’ll learn panes become useful throughout course book. RStudio IDE R. Figure 1: RStudio IDE R. still need download R? Even use RStudio, ’ll still need download R computer. RStudio helps use version R lives computer, doesn’t come version R .","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"opening-r","dir":"","previous_headings":"Installing R and RStudio","what":"Opening R","title":"Integrating Spectra with Python's matchms","text":"Now R RStudio computer, can begin using R opening RStudio program. Open RStudio just program, clicking icon typing “RStudio” Windows Run prompt.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"installing-bioconductor","dir":"","previous_headings":"SpectriPy pre-requisites and installation instructions","what":"Installing Bioconductor","title":"Integrating Spectra with Python's matchms","text":"Bioconductor required install SpectriPy, described source https://bioconductor.org/install/. current release Bioconductor version 3.20; works R version 4.4.0. Users older R Bioconductor must update installation take advantage new features access packages added Bioconductor since last release. development version Bioconductor version 3.21; works R version 4.5.0. recent ‘devel’ versions R (available) supported next Bioconductor release cycle. R installed, get latest version Bioconductor starting R entering following commands. may possible change Bioconductor version existing installation; see Changing version section BiocManager vignette. Details, including instructions install additional packages update, find, troubleshoot provided . devel version Bioconductor available. good reasons using BiocManager::install() managing Bioconductor resources.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(version = \"3.20\")"},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"installing-spectripy","dir":"","previous_headings":"SpectriPy pre-requisites and installation instructions","what":"Installing SpectriPy","title":"Integrating Spectra with Python's matchms","text":"SpectriPy uses basilisk ensure required python packages installed available (correct version) system. basilisk installs self-contained conda environment, thus, SpectriPy package independent system’s Python environment. Since SpectriPy currently still development, need remotes package install GitHub. remotes package yet, can install using following command: install SpectriPi package use","code":"install.packages(\"remotes\") BiocManager::install(\"RforMassSpectrometry/SpectriPy\")"},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"check-installation-completed","dir":"","previous_headings":"SpectriPy pre-requisites and installation instructions","what":"Check installation completed","title":"Integrating Spectra with Python's matchms","text":"status installation can easily checked starting R entering following commands. command loads SpectriPy package, correct installed.","code":"library(SpectriPy)"},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"small-coding-example","dir":"","previous_headings":"","what":"Small coding example","title":"Integrating Spectra with Python's matchms","text":"concepts examples can checked performing steps package’s vignette, source https://rformassspectrometry.github.io/SpectriPy/articles/SpectriPy.html.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"installing-spectra","dir":"","previous_headings":"Small coding example","what":"Installing Spectra","title":"Integrating Spectra with Python's matchms","text":"install Spectra package use following command. package needed, SpectriPy package allows integration Python MS packages Spectra-based MS analysis R.","code":"BiocManager::install(\"RforMassSpectrometry/Spectra\")"},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"spectra-similarity-calculations-using-matchms","dir":"","previous_headings":"Small coding example","what":"Spectra similarity calculations using matchms","title":"Integrating Spectra with Python's matchms","text":"SpectriPy package provides compareSpectriPy() function allows perform spectra similarity calculations using scoring functions matchms Python package. currently supported scoring functions listed along parameter class allows selecting configuring algorithm compareSpectriPy() function. Additional functions added future. CosineGreedy: CosineGreedyParam. CosineHungarian: CosineHungarianParam. ModifiedCosineParam: ModifiedCosineParam. next create simple example spectra subsequently use compareSpectriPy() function calculate pairwise similarities . first calculate pairwise similarities spectra defined caffeine using Spectra’s built-compareSpectra() function. Thus, compareSpectra() returned pairwise similarity scores (default calculated using normalized dot-product function) spectra (rows) spectra caf (columns). compareSpectriPy() works similar, difference need specify configure similarity function (matchms) using dedicated parameter object. calculate similarity using CosineGreedy function changing tolerance value 0.05 (instead default 0.1). result compareSpectriPy() returns also numeric matrix similarities. Note also first compareSpectriPy() call takes usually little longer Python setup initialized. Next use ModifiedCosine algorithm considers also differences spectra’s precursor m/z calculation. Note calculation spectra precursor m/z values need available, otherwise error thrown. Thus, always ensure remove spectra without precursor m/z values prior similarity scoring similarity method. remove precursor m/z one input spectra show Spectra object subsetted valid spectra method.","code":"library(Spectra) library(SpectriPy)  ## Create a Spectra object with two MS2 spectra for Caffeine. caf <- DataFrame(     msLevel = c(2L, 2L),     name = \"Caffeine\",     precursorMz = c(195.0877, 195.0877) ) caf$intensity <- list(     c(340.0, 416, 2580, 412),     c(388.0, 3270, 85, 54, 10111)) caf$mz <- list(     c(135.0432, 138.0632, 163.0375, 195.0880),     c(110.0710, 138.0655, 138.1057, 138.1742, 195.0864)) caf <- Spectra(caf)  ## Create a Spectra object with two MS2 spectra for 1-Methylhistidine mhd <- DataFrame(     msLevel = c(2L, 2L),     precursorMz = c(170.0924, 170.0924),     id = c(\"HMDB0000001\", \"HMDB0000001\"),     name = c(\"1-Methylhistidine\", \"1-Methylhistidine\")) mhd$mz <- list(     c(109.2, 124.2, 124.5, 170.16, 170.52),     c(83.1, 96.12, 97.14, 109.14, 124.08, 125.1, 170.16)) mhd$intensity <- list(     c(3.407, 47.494, 3.094, 100.0, 13.240),     c(6.685, 4.381, 3.022, 16.708, 100.0, 4.565, 40.643)) mhd <- Spectra(mhd) all <- c(caf, mhd) res_r <- compareSpectra(all, caf) res_r res <- compareSpectriPy(all, caf, param = CosineGreedyParam(tolerance = 0.05)) res res <- compareSpectriPy(all, caf, param = ModifiedCosineParam()) res ## Remove precursor m/z from the 3rd spectrum all$precursorMz[3] <- NA  ## Filter the input spectra removing those with missing precursor. all <- all[!is.na(precursorMz(all))]  compareSpectriPy(all, caf, param = ModifiedCosineParam())"},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"development-notes","dir":"","previous_headings":"","what":"Development notes","title":"Integrating Spectra with Python's matchms","text":"See devnotes.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Integrating Spectra with Python's matchms","text":"Contributions highly welcome follow contribution guidelines. General information package structure helpful pointers given Development notes document. Also, please check coding style guidelines importantly, follow code conduct.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/compareSpectriPy.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectra similarity calculations using matchms — compareSpectriPy","title":"Spectra similarity calculations using matchms — compareSpectriPy","text":"compareSpectriPy() function allows calculate spectral similarity scores using calculate_scores module python matchms.similarity package package. Selection configuration algorithm can performed one parameter objects: CosineGreedyParam: calculate cosine similarity score spectra. score calculated finding best possible matches peaks two spectra. Two peaks considered potential match m/z ratios lie within given tolerance. underlying peak assignment problem solved greedy way. can perform notably faster, occasionally deviate slightly fully correct solution (CosineHungarianParam algorithm). practice rarely affect similarity scores notably, particular smaller tolerances. algorithm can configured parameters tolerance, mzPower intensityPower (see parameter description details). CosineHungarianParam: calculate cosine similarity score CosineGreedyParam, using Hungarian algorithm find best matching peaks compared spectra. algorithm can configured parameters tolerance, mzPower intensityPower (see parameter description details). ModifiedCosineParam: modified cosine score aims quantifying similarity two mass spectra. score calculated finding best possible matches peaks two spectra. Two peaks considered potential match m/z ratios lie within given tolerance, m/z ratios lie within tolerance mass-shift applied. mass shift simply difference precursor-m/z two spectra. NeutralLossesCosineParam: neutral losses cosine score aims quantifying similarity two mass spectra. score calculated finding best possible matches peaks two spectra. Two peaks considered potential match m/z ratios lie within given tolerance mass-shift applied. mass shift difference precursor-m/z two spectra.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/compareSpectriPy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectra similarity calculations using matchms — compareSpectriPy","text":"","code":"CosineGreedyParam(tolerance = 0.1, mzPower = 0, intensityPower = 1)  CosineHungarianParam(tolerance = 0.1, mzPower = 0, intensityPower = 1)  ModifiedCosineParam(tolerance = 0.1, mzPower = 0, intensityPower = 1)  NeutralLossesCosineParam(   tolerance = 0.1,   mzPower = 0,   intensityPower = 1,   ignorePeaksAbovePrecursor = TRUE )  # S4 method for class 'Spectra,Spectra,CosineGreedyParam' compareSpectriPy(x, y, param, ...)  # S4 method for class 'Spectra,missing,CosineGreedyParam' compareSpectriPy(x, y, param, ...)"},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/compareSpectriPy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectra similarity calculations using matchms — compareSpectriPy","text":"tolerance numeric(1): tolerated differences peaks' m/z. Peaks m/z differences <= tolerance considered matching. mzPower numeric(1): power raise m/z cosine function. default 0, case peak intensity products depend m/z ratios. intensityPower numeric(1): power raise intensity cosine function. default 1. ignorePeaksAbovePrecursor NeutralLossesCosineParam(): logical(1): TRUE (default), peaks m/z values larger precursor m/z ignored. x Spectra::Spectra() object. y Spectra::Spectra() object compare . missing, spectra similarities calculated spectra x. param one parameter classes listed (CosineGreedyParam) defining similarity scoring function python parameters. ... ignored.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/compareSpectriPy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectra similarity calculations using matchms — compareSpectriPy","text":"compareSpectriPy() returns numeric matrix scores, number rows equal length(x) number columns equal length(y).","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/compareSpectriPy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spectra similarity calculations using matchms — compareSpectriPy","text":"Carolin Huber, Michael Witting, Johannes Rainer, Helge Hecht","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/compareSpectriPy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectra similarity calculations using matchms — compareSpectriPy","text":"","code":"library(Spectra) #> Loading required package: S4Vectors #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, saveRDS, setdiff, table, #>     tapply, union, unique, unsplit, which.max, which.min #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: BiocParallel ## Create some example Spectra. DF <- DataFrame(     msLevel = c(2L, 2L, 2L),     name = c(\"Caffeine\", \"Caffeine\", \"1-Methylhistidine\"),     precursorMz = c(195.0877, 195.0877, 170.0924) ) DF$intensity <- list(     c(340.0, 416, 2580, 412),     c(388.0, 3270, 85, 54, 10111),     c(3.407, 47.494, 3.094, 100.0, 13.240)) DF$mz <- list(     c(135.0432, 138.0632, 163.0375, 195.0880),     c(110.0710, 138.0655, 138.1057, 138.1742, 195.0864),     c(109.2, 124.2, 124.5, 170.16, 170.52)) sps <- Spectra(DF)  ## Calculate pairwise similarity beween all spectra within sps with ## matchms' CosineGreedy algorithm ## Note: the first compareSpectriPy will take longer because the Python ## environment needs to be set up. res <- compareSpectriPy(sps, param = CosineGreedyParam()) res #>           [,1]      [,2] [,3] #> [1,] 1.0000000 0.1948181    0 #> [2,] 0.1948181 1.0000000    0 #> [3,] 0.0000000 0.0000000    1  ## Next we calculate similarities for all spectra against the first one res <- compareSpectriPy(sps, sps[1], param = CosineGreedyParam())  ## Calculate pairwise similarity of all spectra in sps with matchms' ## ModifiedCosine algorithm res <- compareSpectriPy(sps, param = ModifiedCosineParam()) res #>           [,1]      [,2]      [,3] #> [1,] 1.0000000 0.1948181 0.1384183 #> [2,] 0.1948181 1.0000000 0.8520549 #> [3,] 0.1384183 0.8520549 1.0000000  ## Note that the ModifiedCosine method requires the precursor m/z to be ## known for all input spectra. Thus, it is advisable to remove spectra ## without precursor m/z before using this algorithm. sps <- sps[!is.na(precursorMz(sps))] compareSpectriPy(sps, param = ModifiedCosineParam()) #>           [,1]      [,2]      [,3] #> [1,] 1.0000000 0.1948181 0.1384183 #> [2,] 0.1948181 1.0000000 0.8520549 #> [3,] 0.1384183 0.8520549 1.0000000"},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/filterSpectriPy.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Spectra using matchms — filterSpectriPy","title":"Filter Spectra using matchms — filterSpectriPy","text":"filterSpectriPy() function allows filter/process Spectra object using select_by_intensity, select_by_mz, remove_peaks_around_precursor_mz, normalize_intensities python matchms.filtering module. Selection configuration algorithm can performed one parameter objects: select_by_intensity: Keeps peaks within defined intensity range (keep intensity_from >= intensity >= intensity_to). select_by_mz: Keeps peaks mz_from mz_to (keep mz_from >= m/z >= mz_to). remove_peaks_around_precursor_mz: Removes peaks within mz_tolerance (Da) precursor mz, exlcuding precursor peak. normalize_intensities: Normalizes intensities peaks (losses) unit height.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/filterSpectriPy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Spectra using matchms — filterSpectriPy","text":"","code":"select_by_intensity(intensity_from = 10, intensity_to = 200)  select_by_mz(mz_from = 0, mz_to = 1000)  remove_peaks_around_precursor_mz(mz_tolerance = 17)  normalize_intensities()  # S4 method for class 'Spectra,select_by_intensity' filterSpectriPy(sps, param, ...)  # S4 method for class 'Spectra,select_by_mz' filterSpectriPy(sps, param, ...)  # S4 method for class 'Spectra,remove_peaks_around_precursor_mz' filterSpectriPy(sps, param, ...)  # S4 method for class 'Spectra,normalize_intensities' filterSpectriPy(sps, param, ...)"},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/filterSpectriPy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Spectra using matchms — filterSpectriPy","text":"intensity_from numeric(1): Set lower threshold peak intensity. Default 10. intensity_to numeric(1): Set upper threshold peak intensity. Default 200. mz_from numeric(1): Set lower threshold m/z peak positions. Default 0. mz_to numeric(1): Set upper threshold m/z peak positions. Default 1000. mz_tolerance numeric(1): Tolerance m/z values allowed lie within precursor mz. Default 17 Da. sps Spectra::Spectra() object. param one parameter classes listed (select_by_intensity) defining filter/processing function python parameters. ... ignored.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/filterSpectriPy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Spectra using matchms — filterSpectriPy","text":"filterSpectriPy() returns Spectra object filtering/processing function applied","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/filterSpectriPy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter Spectra using matchms — filterSpectriPy","text":"Thomas Naake","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/filterSpectriPy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Spectra using matchms — filterSpectriPy","text":"","code":"library(Spectra) ## create some example Spectra DF <- DataFrame(     msLevel = c(2L, 2L, 2L),     name = c(\"Caffeine\", \"Caffeine\", \"1-Methylhistidine\"),     precursorMz = c(195.0877, 195.0877, 170.0924) ) DF$intensity <- list(     c(340.0, 416, 2580, 412),     c(388.0, 3270, 85, 54, 10111),     c(3.407, 47.494, 3.094, 100.0, 13.240)) DF$mz <- list(     c(135.0432, 138.0632, 163.0375, 195.0880),     c(110.0710, 138.0655, 138.1057, 138.1742, 195.0864),     c(109.2, 124.2, 124.5, 170.16, 170.52)) sps <- Spectra(DF)  ## process Spectra with matchms' select_by_intensity algorithm ## note: the first filterSpectriPy will take longer because the Python ## environment needs to be set up. filterSpectriPy(sps, param = select_by_intensity(intensity_from=50, intensity_to=400)) #> MSn data (Spectra) with 3 spectra in a MsBackendMemory backend: #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1        NA        NA        NA #> 2        NA        NA        NA #> 3        NA        NA        NA #>  ... 16 more variables/columns. #> Processing: #>  Merge 3 Spectra into one [Wed Feb  5 13:28:54 2025]   ## Process Spectra with matchms' select_by_mz algorithm filterSpectriPy(sps, param = select_by_mz(mz_from=150, mz_to=450)) #> MSn data (Spectra) with 3 spectra in a MsBackendMemory backend: #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1        NA        NA        NA #> 2        NA        NA        NA #> 3        NA        NA        NA #>  ... 16 more variables/columns. #> Processing: #>  Merge 3 Spectra into one [Wed Feb  5 13:28:54 2025]   ## Calculate pairwise similarity of all spectra in sps with matchms'  ## remove_peaks_around_precursor_mz algorithm filterSpectriPy(sps, param = remove_peaks_around_precursor_mz(mz_tolerance=20)) #> MSn data (Spectra) with 3 spectra in a MsBackendMemory backend: #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1        NA        NA        NA #> 2        NA        NA        NA #> 3        NA        NA        NA #>  ... 16 more variables/columns. #> Processing: #>  Merge 3 Spectra into one [Wed Feb  5 13:28:54 2025]   ## Calculate pairwise similarity of all spectra in sps with matchms'  ## normalize_intensities algorithm filterSpectriPy(sps, normalize_intensities()) #> MSn data (Spectra) with 3 spectra in a MsBackendMemory backend: #>     msLevel     rtime scanIndex #>   <integer> <numeric> <integer> #> 1        NA        NA        NA #> 2        NA        NA        NA #> 3        NA        NA        NA #>  ... 16 more variables/columns. #> Processing: #>  Merge 3 Spectra into one [Wed Feb  5 13:28:54 2025]"},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/rspec_to_pyspec.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","title":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","text":"rspec_to_pyspec() pyspec_to_rspec() functions allow convert R Spectra::Spectra() objects matchms Python matchms.Spectrum objects. functions designed advanced users developers want/need integrate Python/matchms functionality R using reticulate. users use dedicated R functions within package take care running Python code correct Python environment. Parameter mapping allows define spectra variables (metadata) copied R Python spectra. provided spectra variables copied R respectively Python. mapping also defines mapping Spectra's spectra variables Spectrum metadata. names character vector mapping R spectra variables values corresponding names Python's Spectrum metadata. See output spectraVariableMapping() function default variables mapping names. spectraVariableMapping() function provides default mapping core Spectra variables based definition matchms. function returns named vector can directly used parameter mapping rspec_to_pyspec() pyspec_to_rspec() functions.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/rspec_to_pyspec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","text":"","code":"# S4 method for class 'missing' spectraVariableMapping(object, ...)  rspec_to_pyspec(   x,   mapping = spectraVariableMapping(),   reference = import(\"matchms\"),   BPPARAM = SerialParam(),   .check = TRUE )  pyspec_to_rspec(   x,   mapping = spectraVariableMapping(),   BPPARAM = SerialParam(),   .check = TRUE )"},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/rspec_to_pyspec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","text":"object ignored. ... ignored. x rspec_to_pyspec(): Spectra object. pyspec_to_rspec(): Python list matchms Spectrum objects. mapping Named character providing spectra variable names (metadata) convert. Names expected spectra variable names values corresponding names Python Spectrum metadata fields. See description details. reference Optional reference Python environment matchms. BPPARAM Optional parallel processing setup. .check Optionally disable input parameter checking. Input parameter checking disabled good reasons.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/rspec_to_pyspec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","text":"rspec_to_pyspec(): Python array Spectrum objects, length x. pyspec_to_rspec(): Spectra::Spectra() converted spectra. spectraVariableMapping(): named character vector names Spectra variable names values corresponding names matchms.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/rspec_to_pyspec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","text":"Michael Witting, Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/reference/rspec_to_pyspec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low level functions to convert between Spectra and matchms Spectrum — rspec_to_pyspec","text":"","code":"## List the default spectra variables and their mapping. spectraVariableMapping() #>                  precursorMz           precursorIntensity  #>               \"precursor_mz\"        \"precursor_intensity\"  #>              precursorCharge                        rtime  #>                     \"charge\"             \"retention_time\"  #>              collisionEnergy      isolationWindowTargetMz  #>           \"collision_energy\" \"isolation_window_target_mz\"  #>                      msLevel  #>                   \"ms_level\""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectriPy/news/index.html","id":"changes-in-0-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.2.1","title":"SpectriPy 0.2","text":"Add filterSpectriPy method related parameter objects perform spectra filtering/processing via matchms python.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/news/index.html","id":"changes-in-0-2-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.2.0","title":"SpectriPy 0.2","text":"Use matchms version 0.28.2.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectriPy/news/index.html","id":"changes-in-0-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.1.1","title":"SpectriPy 0.1","text":"Small updates fixes package’s vignette.","code":""},{"path":"https://rformassspectrometry.github.io/SpectriPy/news/index.html","id":"changes-in-0-1-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.1.0","title":"SpectriPy 0.1","text":"Add compareSpectriPy method related parameter objects perform spectra similarity calculations python.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/SpectriPy/news/index.html","id":"changes-in-0-0","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.2","title":"SpectriPy 0.0","text":"Add basilisk environment. Add spectraVariableMapping. Refactor functions convert R python spectrum objects add unit tests.","code":""}]
