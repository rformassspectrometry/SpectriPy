% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendPython.R
\docType{class}
\name{MsBackendPy}
\alias{MsBackendPy}
\alias{backendInitialize,MsBackendPy-method}
\alias{length,MsBackendPy-method}
\alias{spectraVariables,MsBackendPy-method}
\alias{spectraData,MsBackendPy-method}
\alias{peaksData,MsBackendPy-method}
\title{A MS data backend for MS data stored in Python}
\usage{
\S4method{backendInitialize}{MsBackendPy}(
  object,
  pythonVariableName = character(),
  spectraVariableMapping = defaultSpectraVariableMapping(),
  ...,
  data
)

\S4method{length}{MsBackendPy}(x)

\S4method{spectraVariables}{MsBackendPy}(object)

\S4method{spectraData}{MsBackendPy}(object, columns = spectraVariables(object), drop = FALSE)

\S4method{peaksData}{MsBackendPy}(object, columns = c("mz", "intensity"), drop = FALSE)
}
\description{
The \code{MsBackendPy} allows to access MS data stored as \code{matchms.Spectrum}
objects from the \href{https://github.com/matchms/matchms}{matchms} Python
library directly from R. The MS data (peaks data or spectra variables) get
translated on-the-fly when accessed. Thus, the \code{MsBackendPy} allows a
seamless integration of Python MS data structures into \code{\link[=Spectra]{Spectra()}} based
analysis workflows.

The \code{MsBackendPy} object is considered \emph{read-only}, i.e. it does not provide
functionality to replace the peaks data from R. However, it is possible to
directly change the data in the referenced Python variable.
}
\details{
The \code{MsBackendPy} keeps only a reference to the MS data in Python (i.e. the
name of the variable in Python) but no other data. Any data requested from
the \code{MsBackendPy} is accessed and translated on-the-fly from the Python
variable. The \code{MsBackendPy} is thus an interface to the MS data, but does
not contain any data itself. Because of this also all changes done to the
data in Python (which inlcudes also a subset operation performed using \code{[}
on the backend in R!) would immediately affect any \code{MsBackendPy} instances
pointing to the same Python variable.
}
\note{
As mentioned in the \emph{details} section the MS data is completely stored in
Python and the backend only references to this data through the name of
the variable in Python. Thus, each time MS data is requested from the
backend, it is retrieved in its \strong{current} state.
If for example data was transformed or metadata added or removed in the
Python object, it would immediately also affect the backend.
}
\author{
Johannes Rainer and the EuBIC hackathon team
}
