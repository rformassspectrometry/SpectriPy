% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendPython.R
\name{MsBackendPy}
\alias{MsBackendPy}
\alias{backendInitialize,MsBackendPy-method}
\alias{length,MsBackendPy-method}
\alias{spectraVariables,MsBackendPy-method}
\alias{spectraData,MsBackendPy-method}
\alias{peaksData,MsBackendPy-method}
\alias{$,MsBackendPy-method}
\alias{reindex}
\title{A MS data backend for MS data stored in Python}
\usage{
\S4method{backendInitialize}{MsBackendPy}(
  object,
  pythonVariableName = character(),
  spectraVariableMapping = defaultSpectraVariableMapping(),
  ...,
  data
)

\S4method{length}{MsBackendPy}(x)

\S4method{spectraVariables}{MsBackendPy}(object)

\S4method{spectraData}{MsBackendPy}(object, columns = spectraVariables(object), drop = FALSE)

\S4method{peaksData}{MsBackendPy}(object, columns = c("mz", "intensity"), drop = FALSE)

\S4method{$}{MsBackendPy}(x, name)

reindex(object)
}
\description{
The \code{MsBackendPy} allows to access MS data stored as \code{matchms.Spectrum}
objects from the \href{https://github.com/matchms/matchms}{matchms} Python
library directly from R. The MS data (peaks data or spectra variables) get
translated on-the-fly when accessed. Thus, the \code{MsBackendPy} allows a
seamless integration of Python MS data structures into \code{\link[=Spectra]{Spectra()}} based
analysis workflows.

The \code{MsBackendPy} object is considered \emph{read-only}, i.e. it does not provide
functionality to replace the peaks data from R. However, it is possible to
directly change the data in the referenced Python variable.
}
\details{
The \code{MsBackendPy} keeps only a reference to the MS data in Python (i.e. the
name of the variable in Python) as well as an index pointing to the
individual spectra in Python but no other data. Any data requested from
the \code{MsBackendPy} is accessed and translated on-the-fly from the Python
variable. The \code{MsBackendPy} is thus an interface to the MS data, but does
not contain any data itself. Because of this also all changes done to the
data in Python (which inlcudes also a subset operation performed using \code{[}
on the backend in R!) would immediately affect any \code{MsBackendPy} instances
pointing to the same Python variable.

Special care must be taken if the MS data structure in Python is subset or
it's order is changed (e.g. by another process). In that case it might be
needed to re-index the backend using the \code{reindex()} function:
\code{object <- reindex(object)}. This will update (replace) the index to the
individual spectra in Python which is stored within the backend.
}
\note{
As mentioned in the \emph{details} section the MS data is completely stored in
Python and the backend only references to this data through the name of
the variable in Python. Thus, each time MS data is requested from the
backend, it is retrieved in its \strong{current} state.
If for example data was transformed or metadata added or removed in the
Python object, it would immediately also affect the backend.
}
\section{\code{MsBackendPy} methods}{


The \code{MsBackendPy} supports all methods defined by the \code{\link[Spectra:MsBackend]{Spectra::MsBackend()}}
interface for access to MS data. Details on the invidual functions can also
be found in the main documentation in the \emph{Spectra} package (i.e. for
\code{\link[Spectra:MsBackend]{Spectra::MsBackend()}}). Here we provide information for functions with
specific properties of the backend.

TODO LLLLL complete the documentation
\itemize{
\item \code{backendInitialize()}:
\item \code{peaksData()}:
\item \code{spectraData()}:
}
}

\section{Additional helper and utility functions}{

\itemize{
\item \code{reindex()}: update the internal \emph{index} to match \code{1:length(object)}.
This function is useful if the original data referenced by the backend was
subset or re-ordered by a different process (or a function in Python).
}
}

\examples{

## Loading an example MGF file provided by the SpectriPy package.
## As an alternative, the data could also be imported directly in Python
## using:
## import matchms
## from matchms.importing import load_from_mgf
## s_p = list(load_from_mgf(r.fl))
library(Spectra)
library(MsBackendMgf)

fl <- system.file("extdata", "mgf", "test.mgf", package = "SpectriPy")
s <- Spectra(fl, source = MsBackendMgf())
s

## Translating the MS data to Python and assigning it to a variable
## named "s_p" in the (*reticulate*'s) `py` Python environment. Assigning
## the variable to the Python environment has performance advantages, as
## any Python code applied to the MS data does not require any data
## conversions.
py_set_attr(py, "s_p", rspec_to_pyspec(s))


## Create a `MsBackendPy` representing an interface to the data in the
## "s_p" variable in Python:
be <- backendInitialize(MsBackendPy(), "s_p")
be

## Create a Spectra object which this backend:
s_2 <- Spectra(be)
s_2

## Available spectra variables: these include, next to the *core* spectra
## variables, also the names of all metadata stored in the `matchms.Spectrum`
## objects.
spectraVariables(s_2)

## Get the full peaks data:
peaksData(s_2)

## Get the full spectra data:
spectraData(s_2)

## Get the m/z values
mz(s_2)

## Plot the first spectrum
plotSpectra(s_2[1L])

}
\author{
Johannes Rainer and the EuBIC hackathon team
}
