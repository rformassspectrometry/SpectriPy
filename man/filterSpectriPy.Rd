% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filterSpectriPy.R
\name{filterSpectriPy}
\alias{filterSpectriPy}
\alias{select_by_intensity}
\alias{select_by_mz}
\alias{remove_peaks_around_precursor_mz}
\alias{normalize_intensities}
\alias{filterSpectriPy,Spectra,select_by_intensity-method}
\alias{filterSpectriPy,Spectra,select_by_mz-method}
\alias{filterSpectriPy,Spectra,remove_peaks_around_precursor_mz-method}
\alias{filterSpectriPy,Spectra,normalize_intensities-method}
\title{Filter Spectra using matchms}
\usage{
select_by_intensity(intensity_from = 10, intensity_to = 200)

select_by_mz(mz_from = 0, mz_to = 1000)

remove_peaks_around_precursor_mz(mz_tolerance = 17)

normalize_intensities()

\S4method{filterSpectriPy}{Spectra,select_by_intensity}(sps, param, ...)

\S4method{filterSpectriPy}{Spectra,select_by_mz}(sps, param, ...)

\S4method{filterSpectriPy}{Spectra,remove_peaks_around_precursor_mz}(sps, param, ...)

\S4method{filterSpectriPy}{Spectra,normalize_intensities}(sps, param, ...)
}
\arguments{
\item{intensity_from}{\code{numeric(1)}: Set lower threshold for peak intensity.
Default is 10.}

\item{intensity_to}{\code{numeric(1)}: Set upper threshold for peak intensity.
Default is 200.}

\item{mz_from}{\code{numeric(1)}: Set lower threshold for m/z peak positions.
Default is 0.}

\item{mz_to}{\code{numeric(1)}: Set upper threshold for m/z peak positions.
Default is 1000.}

\item{mz_tolerance}{\code{numeric(1)}: Tolerance of m/z values that are not
allowed to lie within the precursor mz. Default is 17 Da.}

\item{sps}{A \code{\link[Spectra:Spectra]{Spectra::Spectra()}} object.}

\item{param}{one of parameter classes listed above (such as
\code{select_by_intensity}) defining the filter/processing function in python
and its parameters.}

\item{...}{ignored.}
}
\value{
\code{filterSpectriPy()} returns a \code{Spectra} object on which the
filtering/processing function has been applied
}
\description{
The \code{filterSpectriPy()} function allows to filter/process a \code{Spectra} object
using the \code{select_by_intensity}, \code{select_by_mz},
\code{remove_peaks_around_precursor_mz}, and \code{normalize_intensities} of the python
\href{https://matchms.readthedocs.io/en/latest/api/matchms.filtering.html}{matchms.filtering}
module.

Selection and configuration of the algorithm can be performed with one of the
parameter objects:
\itemize{
\item \code{select_by_intensity}: Keeps only the peaks within defined intensity range
(keep if \code{intensity_from} >= intensity >= \code{intensity_to}).
\item \code{select_by_mz}: Keeps only the peaks between \code{mz_from} and \code{mz_to}
(keep if \code{mz_from} >= m/z >= \code{mz_to}).
\item \code{remove_peaks_around_precursor_mz}: Removes the peaks that are within
\code{mz_tolerance} (in Da) of the precursor mz, exlcuding the precursor peak.
\item \code{normalize_intensities}: Normalizes the intensities of peaks
(and losses) to unit height.
}
}
\examples{
library(Spectra)
## create some example Spectra
DF <- DataFrame(
    msLevel = c(2L, 2L, 2L),
    name = c("Caffeine", "Caffeine", "1-Methylhistidine"),
    precursorMz = c(195.0877, 195.0877, 170.0924)
)
DF$intensity <- list(
    c(340.0, 416, 2580, 412),
    c(388.0, 3270, 85, 54, 10111),
    c(3.407, 47.494, 3.094, 100.0, 13.240))
DF$mz <- list(
    c(135.0432, 138.0632, 163.0375, 195.0880),
    c(110.0710, 138.0655, 138.1057, 138.1742, 195.0864),
    c(109.2, 124.2, 124.5, 170.16, 170.52))
sps <- Spectra(DF)

## process Spectra with matchms' select_by_intensity algorithm
## note: the first filterSpectriPy will take longer because the Python
## environment needs to be set up.
filterSpectriPy(sps, param = select_by_intensity(intensity_from=50, intensity_to=400))

## Process Spectra with matchms' select_by_mz algorithm
filterSpectriPy(sps, param = select_by_mz(mz_from=150, mz_to=450))

## Calculate pairwise similarity of all spectra in sps with matchms' 
## remove_peaks_around_precursor_mz algorithm
filterSpectriPy(sps, param = remove_peaks_around_precursor_mz(mz_tolerance=20))

## Calculate pairwise similarity of all spectra in sps with matchms' 
## normalize_intensities algorithm
filterSpectriPy(sps, normalize_intensities())
}
\seealso{
\code{\link[Spectra:filterMsLevel]{Spectra::filterIntensity()}}, \code{\link[Spectra:filterMsLevel]{Spectra::filterMzRange()}},
\code{\link[Spectra:addProcessing]{Spectra::scalePeaks()}} in the \code{Spectra} package for pure R
implementations of filtering/processing calculations.
}
\author{
Thomas Naake
}
